import numpy as np 
import matplotlib.pyplot as plt
from scipy.signal import convolve2d as conv2
import cv2

def Own_Lucas_kanade(im1,im2,tailleW=50,mgrid=5):
    """ 
        Lucas - Kanade Method insipired by mathworks method
        CORNU Jonathan-David
        Implémentation de la méthode Lucas-Kanade 
    """
    im1= cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
    im2= cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
    """
        Lucas Kanade à partir d'ici
        Pour chaque point, on calcul I_x, I_y, I_t
    """
    grad_x=np.array([[-1,1],[-1,1]]) # Variable de convolution pour dx
    grad_y=np.array([[-1,-1],[1,1]]) # Variable de convolution pour dy
    """
        Détermination des dérivées dx,dy,dt
    """
    Ix = conv2(im1,grad_x, 'valid')
    Iy = conv2(im1,grad_y, 'valid')
    It = conv2(im1, np.ones((2,2)), 'valid') + conv2(im2, -np.ones((2,2)), 'valid')
    """
        Construction des variables pour les vecteur Vx => u et Vy => y 
    """
    u = np.zeros(np.shape(im1))
    v = np.zeros(np.shape(im2))
    A=np.zeros((2,2))
    l,c=np.shape(Ix)
    B=np.zeros((2, 1))
    
    
    i=mgrid # Variable pour le traçage des vecteurs pour la suite
    w = int(tailleW/2) # Taille de la fenêtre 
    
    for y in range(0,l,i): # par pas de i pour éviter de faire des calculs inutils
        for x in range(0,c,i):
            A[0, 0] = np.sum((Ix[y - w:y + w+1, x - w:x + w+1]) ** 2)
    
            A[1, 1] = np.sum((Iy[y - w:y + w+1, x - w:x + w+1]) ** 2)
            A[0, 1] = np.sum(Ix[y - w:y + w+1, x - w:x + w+1] * Iy[y - w:y + w+1, x - w:x + w+1])
            A[1, 0] = np.sum(Ix[y - w:y + w+1, x - w:x + w+1] * Iy[y - w:y + w+1, x - w:x + w+1])
            Ainv = np.linalg.pinv(A)
    
            B[0, 0] = -np.sum(Ix[y - w:y + w+1, x - w:x + w+1] * It[y - w:y + w+1, x - w:x + w+1])
            B[1, 0] = -np.sum(Iy[y - w:y + w+1, x - w:x + w+1] * It[y - w:y + w+1, x - w:x + w+1])
            prod = np.dot(Ainv, B)
    
            u[y, x] = prod[0]
            v[y, x] = prod[1]
    
    m,n = np.shape(im1)
    X,Y = np.meshgrid(range(0,n), range(0,m)) # Variable de quadrillage 

    X_deci = X[0::i, 0::i]
    Y_deci = Y[0::i, 0::i]
    u_deci = u[0::i,0::i]
    v_deci = v[0::i,0::i]
    return (X_deci,Y_deci,u_deci,v_deci) # return des variable Vx,Vy et celles de quadrillages

I1= cv2.imread("fr11.jpg")

I2= cv2.imread("fr12.jpg")

X_deci,Y_deci,u_deci,v_deci = Own_Lucas_kanade(I1, I2,tailleW=70,mgrid=5)


plt.figure()
plt.imshow(I2[::,::,::-1])
plt.quiver(X_deci,Y_deci,u_deci,v_deci,minshaft=15,scale= None,pivot='middle',color='yellow')
